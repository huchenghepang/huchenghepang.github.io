"use strict";(self.webpackChunkskycity=self.webpackChunkskycity||[]).push([[636],{9750:(s,a,e)=>{e.r(a),e.d(a,{comp:()=>t,data:()=>r});var n=e(641);const i=[(0,n.Fv)('<h1 id="git常见命令" tabindex="-1"><a class="header-anchor" href="#git常见命令"><span>Git常见命令</span></a></h1><h2 id="_1-安装-git" tabindex="-1"><a class="header-anchor" href="#_1-安装-git"><span>1. 安装 Git</span></a></h2><p>确保已经安装了 Git。如果没有，请根据你的操作系统进行安装：</p><ul><li><strong>Windows</strong>：下载并安装 <a href="https://gitforwindows.org/" target="_blank" rel="noopener noreferrer">Git for Windows</a>。</li><li><strong>macOS</strong>：你可以通过 Homebrew 安装 Git，运行 <code>brew install git</code>。</li><li><strong>Linux</strong>：使用包管理器安装，比如在 Debian/Ubuntu 上运行 <code>sudo apt-get install git</code>。</li></ul><h2 id="_2-配置-git" tabindex="-1"><a class="header-anchor" href="#_2-配置-git"><span>2. 配置 Git</span></a></h2><p>安装完成后，设置你的用户名和邮箱，这些信息将记录在你的提交历史中：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;Your Name&quot;</span></span>\n<span class="line"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;your.email@example.com&quot;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-创建一个新目录" tabindex="-1"><a class="header-anchor" href="#_3-创建一个新目录"><span>3. 创建一个新目录</span></a></h2><p>在终端或命令提示符中，导航到你想要创建 Git 仓库的目录，然后创建一个新目录并进入该目录：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">mkdir</span> myproject</span>\n<span class="line"><span class="token builtin class-name">cd</span> myproject</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-初始化-git-仓库" tabindex="-1"><a class="header-anchor" href="#_4-初始化-git-仓库"><span>4. 初始化 Git 仓库</span></a></h2><p>在新目录中，运行以下命令来初始化一个新的 Git 仓库：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">git</span> init</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此命令将创建一个名为 <code>.git</code> 的隐藏目录，这是 Git 用来跟踪你的项目历史的地方。</p><h2 id="_5-添加文件并提交" tabindex="-1"><a class="header-anchor" href="#_5-添加文件并提交"><span>5. 添加文件并提交</span></a></h2><p>创建或复制一些文件到这个目录，然后添加这些文件到 Git 仓库并提交：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">git</span> <span class="token function">add</span> README.md</span>\n<span class="line"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;Initial commit&quot;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-检查仓库状态" tabindex="-1"><a class="header-anchor" href="#_6-检查仓库状态"><span>6. 检查仓库状态</span></a></h2><p>你可以使用 <code>git status</code> 查看仓库的当前状态：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">git</span> status</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>到此，你已经成功在本地创建了一个 Git 仓库并进行了第一次提交。你可以继续添加文件、提交更改，并根据需要创建分支、合并等操作。</p><h3 id="_6-1额外操作-连接远程仓库" tabindex="-1"><a class="header-anchor" href="#_6-1额外操作-连接远程仓库"><span>6.1额外操作：连接远程仓库</span></a></h3><p>如果你需要将本地仓库推送到远程仓库（例如 GitHub、GitLab 等），可以使用以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/username/repository.git</span>\n<span class="line"><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-创建新分支" tabindex="-1"><a class="header-anchor" href="#_7-创建新分支"><span>7. 创建新分支</span></a></h2><p>使用 <code>git branch</code> 命令创建一个新分支。例如，要创建一个名为 <code>new-feature</code> 的分支，可以运行：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">git</span> branch new-feature</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_8-切换到新分支" tabindex="-1"><a class="header-anchor" href="#_8-切换到新分支"><span>8. 切换到新分支</span></a></h2><p>创建分支后，使用 <code>git checkout</code> 命令切换到该分支：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">git</span> checkout new-feature</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_9-git-switch-命令来切换分支" tabindex="-1"><a class="header-anchor" href="#_9-git-switch-命令来切换分支"><span>9. <code>git switch</code> 命令来切换分支：</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">git</span> switch new-feature</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_10-创建并切换到新分支-简化命令" tabindex="-1"><a class="header-anchor" href="#_10-创建并切换到新分支-简化命令"><span>10. 创建并切换到新分支（简化命令）</span></a></h2><p><code>git checkout -b</code> 命令来同时创建并切换到新分支：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> new-feature</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者使用 <code>git switch -c</code> 命令：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">git</span> switch <span class="token parameter variable">-c</span> new-feature</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_10-1-示例" tabindex="-1"><a class="header-anchor" href="#_10-1-示例"><span>10.1 示例</span></a></h3><p>假设你在 <code>master</code> 分支上，并希望创建一个名为 <code>feature-branch</code> 的新分支并切换到该分支：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 确认当前在master分支</span></span>\n<span class="line"><span class="token function">git</span> checkout master</span>\n<span class="line"></span>\n<span class="line"><span class="token comment"># 创建并切换到feature-branch分支</span></span>\n<span class="line"><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> feature-branch</span>\n<span class="line"></span>\n<span class="line"><span class="token comment"># 或者</span></span>\n<span class="line"><span class="token function">git</span> switch <span class="token parameter variable">-c</span> feature-branch</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样你就创建并切换到了一个新的分支 <code>feature-branch</code>。你可以在这个分支上进行开发，而不影响 <code>master</code> 分支的代码。</p><h2 id="_11-打开终端或命令提示符" tabindex="-1"><a class="header-anchor" href="#_11-打开终端或命令提示符"><span>11.打开终端或命令提示符</span></a></h2><p>首先，打开你的终端（macOS 或 Linux）或命令提示符（Windows）。</p><h2 id="_12-导航到你的本地仓库" tabindex="-1"><a class="header-anchor" href="#_12-导航到你的本地仓库"><span>12. 导航到你的本地仓库</span></a></h2><p>使用 <code>cd</code> 命令导航到你要添加远程仓库的本地仓库目录。例如：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token builtin class-name">cd</span> /path/to/your/local/repository</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_13-添加远程仓库" tabindex="-1"><a class="header-anchor" href="#_13-添加远程仓库"><span>13. 添加远程仓库</span></a></h2><p>使用 <code>git remote add</code> 命令添加远程仓库。你需要提供一个远程仓库的名称（通常是 <code>origin</code>）和远程仓库的 URL。例如，如果你有一个在 GitHub 上的仓库，你可以这样添加：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/username/repository.git</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_14-验证远程仓库" tabindex="-1"><a class="header-anchor" href="#_14-验证远程仓库"><span>14. 验证远程仓库</span></a></h2><p>你可以使用 <code>git remote -v</code> 命令来验证远程仓库是否已经成功添加：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">git</span> remote <span class="token parameter variable">-v</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出应该类似于：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">origin  https://github.com/username/repository.git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span></span>\n<span class="line">origin  https://github.com/username/repository.git <span class="token punctuation">(</span>push<span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-1示例" tabindex="-1"><a class="header-anchor" href="#_14-1示例"><span>14.1示例</span></a></h3><p>假设你有一个 GitHub 仓库 <code>https://github.com/username/myproject.git</code>，并且想将它添加为远程仓库，步骤如下：</p><ol><li><p>打开终端或命令提示符。</p></li><li><p>导航到你的本地仓库目录：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token builtin class-name">cd</span> /path/to/your/local/repository</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>添加远程仓库：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/huchenghepang/huchenghepang.github.io.git</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>验证远程仓库是否已添加：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">git</span> remote <span class="token parameter variable">-v</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h2 id="_15-推送到远程仓库" tabindex="-1"><a class="header-anchor" href="#_15-推送到远程仓库"><span>15.推送到远程仓库</span></a></h2><p>添加远程仓库后，你可以使用 <code>git push</code> 命令将本地代码推送到远程仓库。例如，将代码推送到 <code>origin</code> 的 <code>master</code> 分支：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_16-深入了解推送到远程仓库" tabindex="-1"><a class="header-anchor" href="#_16-深入了解推送到远程仓库"><span>16.深入了解推送到远程仓库</span></a></h2><p>将master分支代码提交到main分支，VSCode写项目时默认分支为master，而github创建repository默认为main，如何将本地的master分支提交到远程main分支上。</p><h3 id="_16-1-方式1-通过修改本地分支名称" tabindex="-1"><a class="header-anchor" href="#_16-1-方式1-通过修改本地分支名称"><span>16.1 方式1：通过修改本地分支名称</span></a></h3><p>修改本地分支名称</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">git</span> branch <span class="token parameter variable">-m</span> master main</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>拉取main分支代码</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">git</span> pull origin main</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果报错 如果本地代码没有被提交过，尝试拉取远程main分支代码时，可能会报错refusing to merge unrelated histories，这通常是因为本地分支上的代码和远程分支上的代码没有共同祖先，也就是说他们之间没有关联。要强制合并两个不相关的历史记录</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">git</span> pull origin main --allow-unrelated-histories</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>提交修改</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">git</span> commit  <span class="token string">&quot;your commit message&quot;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>推送到远程main分支</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">git</span> push</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_16-2-方式2-先将本地master分支代码提交到远程main分支后删除本地master分支" tabindex="-1"><a class="header-anchor" href="#_16-2-方式2-先将本地master分支代码提交到远程main分支后删除本地master分支"><span>16.2 方式2：先将本地master分支代码提交到远程main分支后删除本地master分支</span></a></h3><p>拉取远程分支上的代码 首先，在master分支拉取远程main分支的代码。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">git</span> pull origin main</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果报错 如果本地代码没有被提交过，尝试拉取远程main分支代码时，可能会报错refusing to merge unrelated histories，这通常是因为本地分支上的代码和远程分支上的代码没有共同祖先，也就是说他们之间没有关联。 要强制合并两个不相关的历史记录</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">git</span> pull origin main --allow-unrelated-histories</span>\n<span class="line"><span class="token comment"># 提交修改</span></span>\n<span class="line"><span class="token function">git</span> commit  <span class="token string">&quot;your commit message&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment"># 推送到远程main分支</span></span>\n<span class="line"><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master:main</span>\n<span class="line"></span>\n<span class="line"><span class="token comment"># 删除本地master分支</span></span>\n<span class="line"><span class="token comment"># 首先，切换到main分支</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">git</span> checkout main </span>\n<span class="line"></span>\n<span class="line"><span class="token comment"># 拉取代码</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">git</span> pull</span>\n<span class="line"></span>\n<span class="line"> <span class="token comment"># 删除本地master分支</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">git</span> branch <span class="token parameter variable">-d</span> master</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就将本地master分支下的代码推送到了github Repository下的main分支，同时不会在远程创建master分支。</p>',79)],l={},t=(0,e(6262).A)(l,[["render",function(s,a){return(0,n.uX)(),(0,n.CE)("div",null,i)}]]),r=JSON.parse('{"path":"/posts/Git%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4.html","title":"Git常见命令","lang":"en-US","frontmatter":{"date":"2024-07-11T00:00:00.000Z","category":["git"],"tag":["git","github","仓库"],"archive":false},"headers":[{"level":2,"title":"1. 安装 Git","slug":"_1-安装-git","link":"#_1-安装-git","children":[]},{"level":2,"title":"2. 配置 Git","slug":"_2-配置-git","link":"#_2-配置-git","children":[]},{"level":2,"title":"3. 创建一个新目录","slug":"_3-创建一个新目录","link":"#_3-创建一个新目录","children":[]},{"level":2,"title":"4. 初始化 Git 仓库","slug":"_4-初始化-git-仓库","link":"#_4-初始化-git-仓库","children":[]},{"level":2,"title":"5. 添加文件并提交","slug":"_5-添加文件并提交","link":"#_5-添加文件并提交","children":[]},{"level":2,"title":"6. 检查仓库状态","slug":"_6-检查仓库状态","link":"#_6-检查仓库状态","children":[{"level":3,"title":"6.1额外操作：连接远程仓库","slug":"_6-1额外操作-连接远程仓库","link":"#_6-1额外操作-连接远程仓库","children":[]}]},{"level":2,"title":"7. 创建新分支","slug":"_7-创建新分支","link":"#_7-创建新分支","children":[]},{"level":2,"title":"8. 切换到新分支","slug":"_8-切换到新分支","link":"#_8-切换到新分支","children":[]},{"level":2,"title":"9. git switch 命令来切换分支：","slug":"_9-git-switch-命令来切换分支","link":"#_9-git-switch-命令来切换分支","children":[]},{"level":2,"title":"10. 创建并切换到新分支（简化命令）","slug":"_10-创建并切换到新分支-简化命令","link":"#_10-创建并切换到新分支-简化命令","children":[{"level":3,"title":"10.1 示例","slug":"_10-1-示例","link":"#_10-1-示例","children":[]}]},{"level":2,"title":"11.打开终端或命令提示符","slug":"_11-打开终端或命令提示符","link":"#_11-打开终端或命令提示符","children":[]},{"level":2,"title":"12. 导航到你的本地仓库","slug":"_12-导航到你的本地仓库","link":"#_12-导航到你的本地仓库","children":[]},{"level":2,"title":"13. 添加远程仓库","slug":"_13-添加远程仓库","link":"#_13-添加远程仓库","children":[]},{"level":2,"title":"14. 验证远程仓库","slug":"_14-验证远程仓库","link":"#_14-验证远程仓库","children":[{"level":3,"title":"14.1示例","slug":"_14-1示例","link":"#_14-1示例","children":[]}]},{"level":2,"title":"15.推送到远程仓库","slug":"_15-推送到远程仓库","link":"#_15-推送到远程仓库","children":[]},{"level":2,"title":"16.深入了解推送到远程仓库","slug":"_16-深入了解推送到远程仓库","link":"#_16-深入了解推送到远程仓库","children":[{"level":3,"title":"16.1 方式1：通过修改本地分支名称","slug":"_16-1-方式1-通过修改本地分支名称","link":"#_16-1-方式1-通过修改本地分支名称","children":[]},{"level":3,"title":"16.2 方式2：先将本地master分支代码提交到远程main分支后删除本地master分支","slug":"_16-2-方式2-先将本地master分支代码提交到远程main分支后删除本地master分支","link":"#_16-2-方式2-先将本地master分支代码提交到远程main分支后删除本地master分支","children":[]}]}],"git":{"updatedTime":1720634571000,"contributors":[{"name":"huchenghepang","email":"2927678784@qq.com","commits":1}]},"filePathRelative":"posts/Git常见命令.md","excerpt":"\\n<h2>1. 安装 Git</h2>\\n<p>确保已经安装了 Git。如果没有，请根据你的操作系统进行安装：</p>\\n<ul>\\n<li><strong>Windows</strong>：下载并安装 <a href=\\"https://gitforwindows.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Git for Windows</a>。</li>\\n<li><strong>macOS</strong>：你可以通过 Homebrew 安装 Git，运行 <code>brew install git</code>。</li>\\n<li><strong>Linux</strong>：使用包管理器安装，比如在 Debian/Ubuntu 上运行 <code>sudo apt-get install git</code>。</li>\\n</ul>"}')}}]);